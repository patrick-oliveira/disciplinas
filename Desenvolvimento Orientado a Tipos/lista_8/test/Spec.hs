{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE DataKinds #-}
{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}

module Main (main) where

import Test.Tasty
import Test.Tasty.HUnit
import Atividade08


main :: IO ()
main = do
  defaultMain tests

tests :: TestTree
tests = testGroup "Testes da Atividade 8" [nullT, intersect, same, podeDoarPara, podeReceberDe, tipoSanguineo]

aeq :: (Show a, Eq a) => a -> a -> Assertion
aeq actual ex = assertEqual "" ex actual

nullT :: TestTree
nullT = testGroup "Null" [
    testCase "Null '[]" $ aeq (pprint0 @(Null '[])) "True"
  , testCase "Null '[AntA]" $ aeq (pprint0 @(Null '[AntA])) "False"
  , testCase "Null '[1, 2]" $ aeq (pprint0 @(Null '[1, 2])) "False"
  ]

intersect :: TestTree
intersect = testGroup "Intersect" [
    testCase "Intersect '[] '[]" $ aeq (pprint0 @(Intersect '[] '[])) "[]"
  , testCase "Intersect '[AntA] '[]" $ aeq (pprint0 @(Intersect '[AntA] '[])) "[]"
  , testCase "Intersect '[1, 2, 5, 3] '[3, 2]" $ aeq (pprint0 @(Intersect '[1, 2, 5, 3] '[3, 2])) "2 : 3 : []"
  ]


same :: TestTree
same = testGroup "Same" [
    testCase "Same '[] '[]" $ aeq (pprint0 @(Same '[] '[])) "True"
  , testCase "Same '[AntA] '[]" $ aeq (pprint0 @(Same '[AntA] '[])) "False"
  , testCase "Same '[1, 2, 5, 3] '[3, 2]" $ aeq (pprint0 @(Same '[1, 2, 5, 3] '[3, 2])) "False"
  , testCase "Same '[1, 2, 5, 3] '[1, 2, 3, 5]" $ aeq (pprint0 @(Same '[1, 2, 5, 3] '[1, 2, 3, 5])) "False"
  , testCase "Same '[1, 2, 3, 5] '[1, 2, 3, 5]" $ aeq (pprint0 @(Same '[1, 2, 3, 5] '[1, 2, 3, 5])) "True"
  ]


podeDoarPara :: TestTree
podeDoarPara = testGroup "Pode doar para " [
    testCase "PodeDoarPara AP AP" $ aeq (pprint0 @(PodeDoarPara AP AP)) "True"
  , testCase "PodeDoarPara AP AN" $ aeq (pprint0 @(PodeDoarPara AP AN)) "False"
  , testCase "PodeDoarPara AP BP" $ aeq (pprint0 @(PodeDoarPara AP BP)) "False"
  , testCase "PodeDoarPara AP BN" $ aeq (pprint0 @(PodeDoarPara AP BN)) "False"
  , testCase "PodeDoarPara AP ABP" $ aeq (pprint0 @(PodeDoarPara AP ABP)) "True"
  , testCase "PodeDoarPara AP ABN" $ aeq (pprint0 @(PodeDoarPara AP ABN)) "False"
  , testCase "PodeDoarPara AP OP" $ aeq (pprint0 @(PodeDoarPara AP OP)) "False"
  , testCase "PodeDoarPara AP ON" $ aeq (pprint0 @(PodeDoarPara AP ON)) "False"
  , testCase "PodeDoarPara AN AP" $ aeq (pprint0 @(PodeDoarPara AN AP)) "True"
  , testCase "PodeDoarPara AN AN" $ aeq (pprint0 @(PodeDoarPara AN AN)) "True"
  , testCase "PodeDoarPara AN BP" $ aeq (pprint0 @(PodeDoarPara AN BP)) "False"
  , testCase "PodeDoarPara AN BN" $ aeq (pprint0 @(PodeDoarPara AN BN)) "False"
  , testCase "PodeDoarPara AN ABP" $ aeq (pprint0 @(PodeDoarPara AN ABP)) "True"
  , testCase "PodeDoarPara AN ABN" $ aeq (pprint0 @(PodeDoarPara AN ABN)) "True"
  , testCase "PodeDoarPara AN OP" $ aeq (pprint0 @(PodeDoarPara AN OP)) "False"
  , testCase "PodeDoarPara AN ON" $ aeq (pprint0 @(PodeDoarPara AN ON)) "False"
  , testCase "PodeDoarPara BP AP" $ aeq (pprint0 @(PodeDoarPara BP AP)) "False"
  , testCase "PodeDoarPara BP AN" $ aeq (pprint0 @(PodeDoarPara BP AN)) "False"
  , testCase "PodeDoarPara BP BP" $ aeq (pprint0 @(PodeDoarPara BP BP)) "True"
  , testCase "PodeDoarPara BP BN" $ aeq (pprint0 @(PodeDoarPara BP BN)) "False"
  , testCase "PodeDoarPara BP ABP" $ aeq (pprint0 @(PodeDoarPara BP ABP)) "True"
  , testCase "PodeDoarPara BP ABN" $ aeq (pprint0 @(PodeDoarPara BP ABN)) "False"
  , testCase "PodeDoarPara BP OP" $ aeq (pprint0 @(PodeDoarPara BP OP)) "False"
  , testCase "PodeDoarPara BP ON" $ aeq (pprint0 @(PodeDoarPara BP ON)) "False"
  , testCase "PodeDoarPara BN AP" $ aeq (pprint0 @(PodeDoarPara BN AP)) "False"
  , testCase "PodeDoarPara BN AN" $ aeq (pprint0 @(PodeDoarPara BN AN)) "False"
  , testCase "PodeDoarPara BN BP" $ aeq (pprint0 @(PodeDoarPara BN BP)) "True"
  , testCase "PodeDoarPara BN BN" $ aeq (pprint0 @(PodeDoarPara BN BN)) "True"
  , testCase "PodeDoarPara BN ABP" $ aeq (pprint0 @(PodeDoarPara BN ABP)) "True"
  , testCase "PodeDoarPara BN ABN" $ aeq (pprint0 @(PodeDoarPara BN ABN)) "True"
  , testCase "PodeDoarPara BN OP" $ aeq (pprint0 @(PodeDoarPara BN OP)) "False"
  , testCase "PodeDoarPara BN ON" $ aeq (pprint0 @(PodeDoarPara BN ON)) "False"
  , testCase "PodeDoarPara ABP AP" $ aeq (pprint0 @(PodeDoarPara ABP AP)) "False"
  , testCase "PodeDoarPara ABP AN" $ aeq (pprint0 @(PodeDoarPara ABP AN)) "False"
  , testCase "PodeDoarPara ABP BP" $ aeq (pprint0 @(PodeDoarPara ABP BP)) "False"
  , testCase "PodeDoarPara ABP BN" $ aeq (pprint0 @(PodeDoarPara ABP BN)) "False"
  , testCase "PodeDoarPara ABP ABP" $ aeq (pprint0 @(PodeDoarPara ABP ABP)) "True"
  , testCase "PodeDoarPara ABP ABN" $ aeq (pprint0 @(PodeDoarPara ABP ABN)) "False"
  , testCase "PodeDoarPara ABP OP" $ aeq (pprint0 @(PodeDoarPara ABP OP)) "False"
  , testCase "PodeDoarPara ABP ON" $ aeq (pprint0 @(PodeDoarPara ABP ON)) "False"
  , testCase "PodeDoarPara ABN AP" $ aeq (pprint0 @(PodeDoarPara ABN AP)) "False"
  , testCase "PodeDoarPara ABN AN" $ aeq (pprint0 @(PodeDoarPara ABN AN)) "False"
  , testCase "PodeDoarPara ABN BP" $ aeq (pprint0 @(PodeDoarPara ABN BP)) "False"
  , testCase "PodeDoarPara ABN BN" $ aeq (pprint0 @(PodeDoarPara ABN BN)) "False"
  , testCase "PodeDoarPara ABN ABP" $ aeq (pprint0 @(PodeDoarPara ABN ABP)) "True"
  , testCase "PodeDoarPara ABN ABN" $ aeq (pprint0 @(PodeDoarPara ABN ABN)) "True"
  , testCase "PodeDoarPara ABN OP" $ aeq (pprint0 @(PodeDoarPara ABN OP)) "False"
  , testCase "PodeDoarPara ABN ON" $ aeq (pprint0 @(PodeDoarPara ABN ON)) "False"
  , testCase "PodeDoarPara OP AP" $ aeq (pprint0 @(PodeDoarPara OP AP)) "True"
  , testCase "PodeDoarPara OP AN" $ aeq (pprint0 @(PodeDoarPara OP AN)) "False"
  , testCase "PodeDoarPara OP BP" $ aeq (pprint0 @(PodeDoarPara OP BP)) "True"
  , testCase "PodeDoarPara OP BN" $ aeq (pprint0 @(PodeDoarPara OP BN)) "False"
  , testCase "PodeDoarPara OP ABP" $ aeq (pprint0 @(PodeDoarPara OP ABP)) "True"
  , testCase "PodeDoarPara OP ABN" $ aeq (pprint0 @(PodeDoarPara OP ABN)) "False"
  , testCase "PodeDoarPara OP OP" $ aeq (pprint0 @(PodeDoarPara OP OP)) "True"
  , testCase "PodeDoarPara OP ON" $ aeq (pprint0 @(PodeDoarPara OP ON)) "False"
  , testCase "PodeDoarPara ON AP" $ aeq (pprint0 @(PodeDoarPara ON AP)) "True"
  , testCase "PodeDoarPara ON AN" $ aeq (pprint0 @(PodeDoarPara ON AN)) "True"
  , testCase "PodeDoarPara ON BP" $ aeq (pprint0 @(PodeDoarPara ON BP)) "True"
  , testCase "PodeDoarPara ON BN" $ aeq (pprint0 @(PodeDoarPara ON BN)) "True"
  , testCase "PodeDoarPara ON ABP" $ aeq (pprint0 @(PodeDoarPara ON ABP)) "True"
  , testCase "PodeDoarPara ON ABN" $ aeq (pprint0 @(PodeDoarPara ON ABN)) "True"
  , testCase "PodeDoarPara ON OP" $ aeq (pprint0 @(PodeDoarPara ON OP)) "True"
  , testCase "PodeDoarPara ON ON" $ aeq (pprint0 @(PodeDoarPara ON ON)) "True"
  ]

podeReceberDe :: TestTree
podeReceberDe = testGroup "Pode receber de" [
    testCase "PodeReceberDe AP AP" $ aeq (pprint0 @(PodeReceberDe AP AP)) "True"
  , testCase "PodeReceberDe AP AN" $ aeq (pprint0 @(PodeReceberDe AP AN)) "True"
  , testCase "PodeReceberDe AP BP" $ aeq (pprint0 @(PodeReceberDe AP BP)) "False"
  , testCase "PodeReceberDe AP BN" $ aeq (pprint0 @(PodeReceberDe AP BN)) "False"
  , testCase "PodeReceberDe AP ABP" $ aeq (pprint0 @(PodeReceberDe AP ABP)) "False"
  , testCase "PodeReceberDe AP ABN" $ aeq (pprint0 @(PodeReceberDe AP ABN)) "False"
  , testCase "PodeReceberDe AP OP" $ aeq (pprint0 @(PodeReceberDe AP OP)) "True"
  , testCase "PodeReceberDe AP ON" $ aeq (pprint0 @(PodeReceberDe AP ON)) "True"
  , testCase "PodeReceberDe AN AP" $ aeq (pprint0 @(PodeReceberDe AN AP)) "False"
  , testCase "PodeReceberDe AN AN" $ aeq (pprint0 @(PodeReceberDe AN AN)) "True"
  , testCase "PodeReceberDe AN BP" $ aeq (pprint0 @(PodeReceberDe AN BP)) "False"
  , testCase "PodeReceberDe AN BN" $ aeq (pprint0 @(PodeReceberDe AN BN)) "False"
  , testCase "PodeReceberDe AN ABP" $ aeq (pprint0 @(PodeReceberDe AN ABP)) "False"
  , testCase "PodeReceberDe AN ABN" $ aeq (pprint0 @(PodeReceberDe AN ABN)) "False"
  , testCase "PodeReceberDe AN OP" $ aeq (pprint0 @(PodeReceberDe AN OP)) "False"
  , testCase "PodeReceberDe AN ON" $ aeq (pprint0 @(PodeReceberDe AN ON)) "True"
  , testCase "PodeReceberDe BP AP" $ aeq (pprint0 @(PodeReceberDe BP AP)) "False"
  , testCase "PodeReceberDe BP AN" $ aeq (pprint0 @(PodeReceberDe BP AN)) "False"
  , testCase "PodeReceberDe BP BP" $ aeq (pprint0 @(PodeReceberDe BP BP)) "True"
  , testCase "PodeReceberDe BP BN" $ aeq (pprint0 @(PodeReceberDe BP BN)) "True"
  , testCase "PodeReceberDe BP ABP" $ aeq (pprint0 @(PodeReceberDe BP ABP)) "False"
  , testCase "PodeReceberDe BP ABN" $ aeq (pprint0 @(PodeReceberDe BP ABN)) "False"
  , testCase "PodeReceberDe BP OP" $ aeq (pprint0 @(PodeReceberDe BP OP)) "True"
  , testCase "PodeReceberDe BP ON" $ aeq (pprint0 @(PodeReceberDe BP ON)) "True"
  , testCase "PodeReceberDe BN AP" $ aeq (pprint0 @(PodeReceberDe BN AP)) "False"
  , testCase "PodeReceberDe BN AN" $ aeq (pprint0 @(PodeReceberDe BN AN)) "False"
  , testCase "PodeReceberDe BN BP" $ aeq (pprint0 @(PodeReceberDe BN BP)) "False"
  , testCase "PodeReceberDe BN BN" $ aeq (pprint0 @(PodeReceberDe BN BN)) "True"
  , testCase "PodeReceberDe BN ABP" $ aeq (pprint0 @(PodeReceberDe BN ABP)) "False"
  , testCase "PodeReceberDe BN ABN" $ aeq (pprint0 @(PodeReceberDe BN ABN)) "False"
  , testCase "PodeReceberDe BN OP" $ aeq (pprint0 @(PodeReceberDe BN OP)) "False"
  , testCase "PodeReceberDe BN ON" $ aeq (pprint0 @(PodeReceberDe BN ON)) "True"
  , testCase "PodeReceberDe ABP AP" $ aeq (pprint0 @(PodeReceberDe ABP AP)) "True"
  , testCase "PodeReceberDe ABP AN" $ aeq (pprint0 @(PodeReceberDe ABP AN)) "True"
  , testCase "PodeReceberDe ABP BP" $ aeq (pprint0 @(PodeReceberDe ABP BP)) "True"
  , testCase "PodeReceberDe ABP BN" $ aeq (pprint0 @(PodeReceberDe ABP BN)) "True"
  , testCase "PodeReceberDe ABP ABP" $ aeq (pprint0 @(PodeReceberDe ABP ABP)) "True"
  , testCase "PodeReceberDe ABP ABN" $ aeq (pprint0 @(PodeReceberDe ABP ABN)) "True"
  , testCase "PodeReceberDe ABP OP" $ aeq (pprint0 @(PodeReceberDe ABP OP)) "True"
  , testCase "PodeReceberDe ABP ON" $ aeq (pprint0 @(PodeReceberDe ABP ON)) "True"
  , testCase "PodeReceberDe ABN AP" $ aeq (pprint0 @(PodeReceberDe ABN AP)) "False"
  , testCase "PodeReceberDe ABN AN" $ aeq (pprint0 @(PodeReceberDe ABN AN)) "True"
  , testCase "PodeReceberDe ABN BP" $ aeq (pprint0 @(PodeReceberDe ABN BP)) "False"
  , testCase "PodeReceberDe ABN BN" $ aeq (pprint0 @(PodeReceberDe ABN BN)) "True"
  , testCase "PodeReceberDe ABN ABP" $ aeq (pprint0 @(PodeReceberDe ABN ABP)) "False"
  , testCase "PodeReceberDe ABN ABN" $ aeq (pprint0 @(PodeReceberDe ABN ABN)) "True"
  , testCase "PodeReceberDe ABN OP" $ aeq (pprint0 @(PodeReceberDe ABN OP)) "False"
  , testCase "PodeReceberDe ABN ON" $ aeq (pprint0 @(PodeReceberDe ABN ON)) "True"
  , testCase "PodeReceberDe OP AP" $ aeq (pprint0 @(PodeReceberDe OP AP)) "False"
  , testCase "PodeReceberDe OP AN" $ aeq (pprint0 @(PodeReceberDe OP AN)) "False"
  , testCase "PodeReceberDe OP BP" $ aeq (pprint0 @(PodeReceberDe OP BP)) "False"
  , testCase "PodeReceberDe OP BN" $ aeq (pprint0 @(PodeReceberDe OP BN)) "False"
  , testCase "PodeReceberDe OP ABP" $ aeq (pprint0 @(PodeReceberDe OP ABP)) "False"
  , testCase "PodeReceberDe OP ABN" $ aeq (pprint0 @(PodeReceberDe OP ABN)) "False"
  , testCase "PodeReceberDe OP OP" $ aeq (pprint0 @(PodeReceberDe OP OP)) "True"
  , testCase "PodeReceberDe OP ON" $ aeq (pprint0 @(PodeReceberDe OP ON)) "True"
  , testCase "PodeReceberDe ON AP" $ aeq (pprint0 @(PodeReceberDe ON AP)) "False"
  , testCase "PodeReceberDe ON AN" $ aeq (pprint0 @(PodeReceberDe ON AN)) "False"
  , testCase "PodeReceberDe ON BP" $ aeq (pprint0 @(PodeReceberDe ON BP)) "False"
  , testCase "PodeReceberDe ON BN" $ aeq (pprint0 @(PodeReceberDe ON BN)) "False"
  , testCase "PodeReceberDe ON ABP" $ aeq (pprint0 @(PodeReceberDe ON ABP)) "False"
  , testCase "PodeReceberDe ON ABN" $ aeq (pprint0 @(PodeReceberDe ON ABN)) "False"
  , testCase "PodeReceberDe ON OP" $ aeq (pprint0 @(PodeReceberDe ON OP)) "False"
  , testCase "PodeReceberDe ON ON" $ aeq (pprint0 @(PodeReceberDe ON ON)) "True"
  ]

tipoSanguineo :: TestTree
tipoSanguineo = testGroup "Tipo Sanguineo" [
    testCase "Tipo Sanguineo de []" $ aeq (pprint0 @(GetTipoSanguineo '[])) "O-"
  , testCase "Tipo Sanguineo de [AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA])) "A-"
  , testCase "Tipo Sanguineo de [AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB])) "B-"
  , testCase "Tipo Sanguineo de [AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh])) "O+"
  , testCase "Tipo Sanguineo de [AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA])) "A-"
  , testCase "Tipo Sanguineo de [AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB])) "B-"
  , testCase "Tipo Sanguineo de [AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh])) "O+"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntA])) "A-"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntB])) "B-"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntRh])) "O+"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntA, AntA])) "A-"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntA, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntA, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntB, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntB, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntB, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntRh, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntRh, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntA, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntA, AntRh, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntA, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntA, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntA, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntB, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntB, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntB, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntRh, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntRh, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntB, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntB, AntRh, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntA, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntA, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntA, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntB, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntB, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntB, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntRh, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntRh, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntA, AntRh, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntA, AntRh, AntRh, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntA, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntA, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntA, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntB, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntB, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntB, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntRh, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntRh, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntA, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntA, AntRh, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntA, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntA, AntB])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntA, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntB, AntA])) "AB-"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntB, AntB])) "B-"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntB, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntRh, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntRh, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntB, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntB, AntRh, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntA, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntA, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntA, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntB, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntB, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntB, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntRh, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntRh, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntB, AntRh, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntB, AntRh, AntRh, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntA, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntA, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntA, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntB, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntB, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntB, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntRh, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntRh, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntA, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntA, AntRh, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntA, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntA, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntA, AntRh])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntB, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntB, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntB, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntRh, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntRh, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntB, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntB, AntRh, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntA, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntA, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntA, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntA, AntB])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntA, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntA, AntRh])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntB, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntB, AntA])) "AB+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntB, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntB, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntB, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntB, AntRh])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntRh, AntA]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntRh, AntA])) "A+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntRh, AntB]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntRh, AntB])) "B+"
  , testCase "Tipo Sanguineo de [AntRh, AntRh, AntRh, AntRh]" $ aeq (pprint0 @(GetTipoSanguineo '[AntRh, AntRh, AntRh, AntRh])) "O+"
  ]
